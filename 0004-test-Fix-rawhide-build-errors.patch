From 80a4b0a889195c1a325a9bba4d7255e6d3a21f33 Mon Sep 17 00:00:00 2001
From: Marek Blaha <mblaha@redhat.com>
Date: Tue, 17 Jan 2023 18:43:20 +0100
Subject: [PATCH 2/2] test: Fix rawhide build errors

Mostly error: ignoring return value of operator==
---
 test/libdnf/base_test_case.cpp         | 24 +++++++++----------
 test/libdnf/weak_ptr/test_weak_ptr.cpp | 33 +++++++++++++-------------
 2 files changed, 29 insertions(+), 28 deletions(-)

diff --git a/test/libdnf/base_test_case.cpp b/test/libdnf/base_test_case.cpp
index c6e71fe6..8fd582bc 100644
--- a/test/libdnf/base_test_case.cpp
+++ b/test/libdnf/base_test_case.cpp
@@ -87,9 +87,9 @@ libdnf::advisory::Advisory BaseTestCase::get_advisory(const std::string & name)
     }
 
     if (found.empty()) {
-        CPPUNIT_FAIL(format("No advisory \"{}\" found. All pool advisories:{}", name, to_string(advisories)));
+        CPPUNIT_FAIL(fmt::format("No advisory \"{}\" found. All pool advisories:{}", name, to_string(advisories)));
     } else if (found.size() > 1) {
-        CPPUNIT_FAIL(format("More than one advisory matching \"{}\" found:{}", name, to_string(advisories)));
+        CPPUNIT_FAIL(fmt::format("More than one advisory matching \"{}\" found:{}", name, to_string(advisories)));
     }
 
     return *found.begin();
@@ -108,11 +108,11 @@ libdnf::comps::Environment BaseTestCase::get_environment(const std::string & env
     }
 
     if (found.empty()) {
-        CPPUNIT_FAIL(
-            format("No environment \"{}\" found. All pool environments:{}", environmentid, to_string(environments)));
+        CPPUNIT_FAIL(fmt::format(
+            "No environment \"{}\" found. All pool environments:{}", environmentid, to_string(environments)));
     } else if (found.size() > 1) {
         CPPUNIT_FAIL(
-            format("More than one environment matching \"{}\" found:{}", environmentid, to_string(environments)));
+            fmt::format("More than one environment matching \"{}\" found:{}", environmentid, to_string(environments)));
     }
 
     return *found.begin();
@@ -131,9 +131,9 @@ libdnf::comps::Group BaseTestCase::get_group(const std::string & groupid, bool i
     }
 
     if (found.empty()) {
-        CPPUNIT_FAIL(format("No group \"{}\" found. All pool groups:{}", groupid, to_string(groups)));
+        CPPUNIT_FAIL(fmt::format("No group \"{}\" found. All pool groups:{}", groupid, to_string(groups)));
     } else if (found.size() > 1) {
-        CPPUNIT_FAIL(format("More than one group matching \"{}\" found:{}", groupid, to_string(groups)));
+        CPPUNIT_FAIL(fmt::format("More than one group matching \"{}\" found:{}", groupid, to_string(groups)));
     }
 
     return *found.begin();
@@ -165,8 +165,8 @@ libdnf::rpm::Package BaseTestCase::get_pkg_i(const std::string & nevra, size_t i
     query.filter_nevra({nevra});
 
     if (query.size() <= index) {
-        CPPUNIT_FAIL(
-            format("Package index {} out of bounds for \"{}\", query packages:{}", index, nevra, to_string(query)));
+        CPPUNIT_FAIL(fmt::format(
+            "Package index {} out of bounds for \"{}\", query packages:{}", index, nevra, to_string(query)));
     }
 
     auto it = query.begin();
@@ -207,10 +207,10 @@ libdnf::rpm::Package BaseTestCase::add_cmdline_pkg(const std::string & relative_
 
 libdnf::rpm::Package BaseTestCase::first_query_pkg(libdnf::rpm::PackageQuery & query, const std::string & what) {
     if (query.empty()) {
-        CPPUNIT_FAIL(
-            format("No package \"{}\" found. All sack packages:{}", what, to_string(libdnf::rpm::PackageQuery(base))));
+        CPPUNIT_FAIL(fmt::format(
+            "No package \"{}\" found. All sack packages:{}", what, to_string(libdnf::rpm::PackageQuery(base))));
     } else if (query.size() > 1) {
-        CPPUNIT_FAIL(format("More than one package matching \"{}\" found:{}", what, to_string(query)));
+        CPPUNIT_FAIL(fmt::format("More than one package matching \"{}\" found:{}", what, to_string(query)));
     }
 
     return *query.begin();
diff --git a/test/libdnf/weak_ptr/test_weak_ptr.cpp b/test/libdnf/weak_ptr/test_weak_ptr.cpp
index b2a15062..69e45bc8 100644
--- a/test/libdnf/weak_ptr/test_weak_ptr.cpp
+++ b/test/libdnf/weak_ptr/test_weak_ptr.cpp
@@ -83,8 +83,8 @@ void WeakPtrTest::test_weak_ptr() {
     // data from sack1 must be still accesible, but access to data from sack2 must throw exception
     CPPUNIT_ASSERT(*item1_weak_ptr.get() == "sack1_item1");
     CPPUNIT_ASSERT(item2_weak_ptr->compare("sack1_item2") == 0);
-    CPPUNIT_ASSERT_THROW(*item3_weak_ptr.get() == "sack2_item1", libdnf::AssertionError);
-    CPPUNIT_ASSERT_THROW((item4_weak_ptr->compare("sack2_item2") == 0), libdnf::AssertionError);
+    CPPUNIT_ASSERT_THROW(static_cast<void>(*item3_weak_ptr.get() == "sack2_item1"), libdnf::AssertionError);
+    CPPUNIT_ASSERT_THROW(static_cast<void>(item4_weak_ptr->compare("sack2_item2") == 0), libdnf::AssertionError);
 
     // test is_valid() method
     CPPUNIT_ASSERT(item1_weak_ptr.is_valid());
@@ -138,12 +138,12 @@ void WeakPtrTest::test_weak_ptr() {
     sack1->data_guard.clear();
     CPPUNIT_ASSERT(sack1->data_guard.empty());
     CPPUNIT_ASSERT_EQUAL(sack1->data_guard.size(), static_cast<std::size_t>(0));
-    CPPUNIT_ASSERT_THROW(*item1_weak_ptr.get() == "sack1_item1", libdnf::AssertionError);
-    CPPUNIT_ASSERT_THROW(*item2_weak_ptr.get() == "sack1_item2", libdnf::AssertionError);
-    CPPUNIT_ASSERT_THROW(*item3_weak_ptr.get() == "sack1_item2", libdnf::AssertionError);
-    CPPUNIT_ASSERT_THROW(*item4_weak_ptr.get() == "sack1_item1", libdnf::AssertionError);
-    CPPUNIT_ASSERT_THROW(*item5_weak_ptr.get() == "sack1_item1", libdnf::AssertionError);
-    CPPUNIT_ASSERT_THROW(*item6_weak_ptr.get() == "sack1_item1", libdnf::AssertionError);
+    CPPUNIT_ASSERT_THROW(static_cast<void>(*item1_weak_ptr.get() == "sack1_item1"), libdnf::AssertionError);
+    CPPUNIT_ASSERT_THROW(static_cast<void>(*item2_weak_ptr.get() == "sack1_item2"), libdnf::AssertionError);
+    CPPUNIT_ASSERT_THROW(static_cast<void>(*item3_weak_ptr.get() == "sack1_item2"), libdnf::AssertionError);
+    CPPUNIT_ASSERT_THROW(static_cast<void>(*item4_weak_ptr.get() == "sack1_item1"), libdnf::AssertionError);
+    CPPUNIT_ASSERT_THROW(static_cast<void>(*item5_weak_ptr.get() == "sack1_item1"), libdnf::AssertionError);
+    CPPUNIT_ASSERT_THROW(static_cast<void>(*item6_weak_ptr.get() == "sack1_item1"), libdnf::AssertionError);
 }
 
 
@@ -200,8 +200,9 @@ void WeakPtrTest::test_weak_ptr_is_owner() {
     // data from sack1 must be still accesible, but access to data from sack2 must throw exception
     CPPUNIT_ASSERT(*item1_weak_ptr.get()->remote_data == "sack1_item1");
     CPPUNIT_ASSERT(*item2_weak_ptr->remote_data == "sack1_item2");
-    CPPUNIT_ASSERT_THROW(*item3_weak_ptr.get()->remote_data == "sack2_item1", libdnf::AssertionError);
-    CPPUNIT_ASSERT_THROW(*item4_weak_ptr->remote_data == "sack2_item2", libdnf::AssertionError);
+    CPPUNIT_ASSERT_THROW(
+        static_cast<void>(*item3_weak_ptr.get()->remote_data == "sack2_item1"), libdnf::AssertionError);
+    CPPUNIT_ASSERT_THROW(static_cast<void>(*item4_weak_ptr->remote_data == "sack2_item2"), libdnf::AssertionError);
 
     // test is_valid() method
     CPPUNIT_ASSERT(item1_weak_ptr.is_valid());
@@ -218,7 +219,7 @@ void WeakPtrTest::test_weak_ptr_is_owner() {
     // there move constructor
     auto item6_weak_ptr(std::move(item5_weak_ptr));
     CPPUNIT_ASSERT_EQUAL(sack1->data_guard.size(), static_cast<std::size_t>(3));
-    CPPUNIT_ASSERT_THROW(*item5_weak_ptr->remote_data == "sack1_item1", libdnf::AssertionError);
+    CPPUNIT_ASSERT_THROW(static_cast<void>(*item5_weak_ptr->remote_data == "sack1_item1"), libdnf::AssertionError);
     CPPUNIT_ASSERT(*item6_weak_ptr->remote_data == "sack1_item1");
 
     // test copy assignment operator =
@@ -235,7 +236,7 @@ void WeakPtrTest::test_weak_ptr_is_owner() {
     // test move assignment operator =
     item4_weak_ptr = std::move(item2_weak_ptr);
     CPPUNIT_ASSERT_EQUAL(sack1->data_guard.size(), static_cast<std::size_t>(4));
-    CPPUNIT_ASSERT_THROW(*item2_weak_ptr->remote_data == "sack1_item2", libdnf::AssertionError);
+    CPPUNIT_ASSERT_THROW(static_cast<void>(*item2_weak_ptr->remote_data == "sack1_item2"), libdnf::AssertionError);
     CPPUNIT_ASSERT(*item4_weak_ptr->remote_data == "sack1_item2");
 
     // test move self-assignment operator =
@@ -273,8 +274,8 @@ void WeakPtrTest::test_weak_ptr_is_owner() {
     sack1->data_guard.clear();
     CPPUNIT_ASSERT(sack1->data_guard.empty());
     CPPUNIT_ASSERT_EQUAL(sack1->data_guard.size(), static_cast<std::size_t>(0));
-    CPPUNIT_ASSERT_THROW(*item1_weak_ptr->remote_data == "sack1_item1", libdnf::AssertionError);
-    CPPUNIT_ASSERT_THROW(*item3_weak_ptr->remote_data == "sack1_item1", libdnf::AssertionError);
-    CPPUNIT_ASSERT_THROW(*item4_weak_ptr->remote_data == "sack1_item1", libdnf::AssertionError);
-    CPPUNIT_ASSERT_THROW(*item6_weak_ptr->remote_data == "sack1_item2", libdnf::AssertionError);
+    CPPUNIT_ASSERT_THROW(static_cast<void>(*item1_weak_ptr->remote_data == "sack1_item1"), libdnf::AssertionError);
+    CPPUNIT_ASSERT_THROW(static_cast<void>(*item3_weak_ptr->remote_data == "sack1_item1"), libdnf::AssertionError);
+    CPPUNIT_ASSERT_THROW(static_cast<void>(*item4_weak_ptr->remote_data == "sack1_item1"), libdnf::AssertionError);
+    CPPUNIT_ASSERT_THROW(static_cast<void>(*item6_weak_ptr->remote_data == "sack1_item2"), libdnf::AssertionError);
 }
-- 
2.39.0

