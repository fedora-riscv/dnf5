From 45a171d808677bc47077c3d5b31d33aaac99fd03 Mon Sep 17 00:00:00 2001
From: Pavla Kratochvilova <pkratoch@redhat.com>
Date: Thu, 15 Dec 2022 13:02:30 +0100
Subject: [PATCH 1/5] modules: Fix tests for module queries

---
 test/libdnf/module/test_module.cpp | 88 ++++++++++++++++--------------
 1 file changed, 47 insertions(+), 41 deletions(-)

diff --git a/test/libdnf/module/test_module.cpp b/test/libdnf/module/test_module.cpp
index 302cf4de..af985f4b 100644
--- a/test/libdnf/module/test_module.cpp
+++ b/test/libdnf/module/test_module.cpp
@@ -114,46 +114,52 @@ void ModuleTest::test_resolve_broken_defaults() {
 void ModuleTest::test_query() {
     add_repo_repomd("repomd-modules");
 
-    auto module_sack = base.get_module_sack();
+    {
+        ModuleQuery query(base, false);
+        query.filter_name("meson");
+        auto result = query.get();
+        CPPUNIT_ASSERT_EQUAL(std::string("meson"), result.get_name());
+        CPPUNIT_ASSERT_EQUAL(std::string("master"), result.get_stream());
+        CPPUNIT_ASSERT_EQUAL(std::string("20180816151613"), result.get_version_str());
+        CPPUNIT_ASSERT_EQUAL(std::string("06d0a27d"), result.get_context());
+        CPPUNIT_ASSERT_EQUAL(std::string("x86_64"), result.get_arch());
+    }
 
-    ModuleQuery query = *new ModuleQuery(base, false);
-    query.filter_name("meson");
-    auto result = query.get();
-    CPPUNIT_ASSERT_EQUAL(std::string("meson"), result.get_name());
-    CPPUNIT_ASSERT_EQUAL(std::string("master"), result.get_stream());
-    CPPUNIT_ASSERT_EQUAL(std::string("20180816151613"), result.get_version_str());
-    CPPUNIT_ASSERT_EQUAL(std::string("06d0a27d"), result.get_context());
-    CPPUNIT_ASSERT_EQUAL(std::string("x86_64"), result.get_arch());
-
-    query = *new ModuleQuery(base, false);
-    query.filter_name("gooseberry");
-    query.filter_stream("5.4");
-    result = query.get();
-    CPPUNIT_ASSERT_EQUAL(std::string("gooseberry"), result.get_name());
-    CPPUNIT_ASSERT_EQUAL(std::string("5.4"), result.get_stream());
-    CPPUNIT_ASSERT_EQUAL(std::string("1"), result.get_version_str());
-    CPPUNIT_ASSERT_EQUAL(std::string(""), result.get_context());
-    CPPUNIT_ASSERT_EQUAL(std::string("x86_64"), result.get_arch());
-
-    query = *new ModuleQuery(base, false);
-    query.filter_name("gooseberry");
-    query.filter_stream("5.5");
-    query.filter_version("2");
-    result = query.get();
-    CPPUNIT_ASSERT_EQUAL(std::string("gooseberry"), result.get_name());
-    CPPUNIT_ASSERT_EQUAL(std::string("5.5"), result.get_stream());
-    CPPUNIT_ASSERT_EQUAL(std::string("2"), result.get_version_str());
-    CPPUNIT_ASSERT_EQUAL(std::string("72aaf46b6"), result.get_context());
-    CPPUNIT_ASSERT_EQUAL(std::string("x86_64"), result.get_arch());
-
-    query = *new ModuleQuery(base, false);
-    query.filter_name("berries");
-    query.filter_context("6c81f848");
-    query.filter_arch("x86_64");
-    result = query.get();
-    CPPUNIT_ASSERT_EQUAL(std::string("berries"), result.get_name());
-    CPPUNIT_ASSERT_EQUAL(std::string("main"), result.get_stream());
-    CPPUNIT_ASSERT_EQUAL(std::string("4"), result.get_version_str());
-    CPPUNIT_ASSERT_EQUAL(std::string("6c81f848"), result.get_context());
-    CPPUNIT_ASSERT_EQUAL(std::string("x86_64"), result.get_arch());
+    {
+        ModuleQuery query(base, false);
+        query.filter_name("gooseberry");
+        query.filter_stream("5.4");
+        auto result = query.get();
+        CPPUNIT_ASSERT_EQUAL(std::string("gooseberry"), result.get_name());
+        CPPUNIT_ASSERT_EQUAL(std::string("5.4"), result.get_stream());
+        CPPUNIT_ASSERT_EQUAL(std::string("1"), result.get_version_str());
+        CPPUNIT_ASSERT_EQUAL(std::string(""), result.get_context());
+        CPPUNIT_ASSERT_EQUAL(std::string("x86_64"), result.get_arch());
+    }
+
+    {
+        ModuleQuery query(base, false);
+        query.filter_name("gooseberry");
+        query.filter_stream("5.5");
+        query.filter_version("2");
+        auto result = query.get();
+        CPPUNIT_ASSERT_EQUAL(std::string("gooseberry"), result.get_name());
+        CPPUNIT_ASSERT_EQUAL(std::string("5.5"), result.get_stream());
+        CPPUNIT_ASSERT_EQUAL(std::string("2"), result.get_version_str());
+        CPPUNIT_ASSERT_EQUAL(std::string("72aaf46b6"), result.get_context());
+        CPPUNIT_ASSERT_EQUAL(std::string("x86_64"), result.get_arch());
+    }
+
+    {
+        ModuleQuery query(base, false);
+        query.filter_name("berries");
+        query.filter_context("6c81f848");
+        query.filter_arch("x86_64");
+        auto result = query.get();
+        CPPUNIT_ASSERT_EQUAL(std::string("berries"), result.get_name());
+        CPPUNIT_ASSERT_EQUAL(std::string("main"), result.get_stream());
+        CPPUNIT_ASSERT_EQUAL(std::string("4"), result.get_version_str());
+        CPPUNIT_ASSERT_EQUAL(std::string("6c81f848"), result.get_context());
+        CPPUNIT_ASSERT_EQUAL(std::string("x86_64"), result.get_arch());
+    }
 }
-- 
2.39.0


From 1f8ba98a1df74251122a25575f6e3a529ae3b5bd Mon Sep 17 00:00:00 2001
From: Pavla Kratochvilova <pkratoch@redhat.com>
Date: Tue, 3 Jan 2023 11:56:37 +0100
Subject: [PATCH 2/5] modules: Rename get_name_stream_context to
 get_name_stream_staticcontext

In this method, the computed_static_context is used in the output,
while in the other getters, the original context is used, so renaming
this one will help distinguish them.
---
 include/libdnf/module/module_item.hpp | 4 +++-
 libdnf/module/module_item.cpp         | 4 ++--
 libdnf/module/module_sack.cpp         | 2 +-
 3 files changed, 6 insertions(+), 4 deletions(-)

diff --git a/include/libdnf/module/module_item.hpp b/include/libdnf/module/module_item.hpp
index 226b7625..e0d62294 100644
--- a/include/libdnf/module/module_item.hpp
+++ b/include/libdnf/module/module_item.hpp
@@ -192,7 +192,9 @@ private:
     std::string get_name_stream() const;
     // @replaces libdnf:module/ModuleItem.hpp:method:ModuleItem.getNameStreamVersion()
     std::string get_name_stream_version() const;
-    std::string get_name_stream_context() const;
+    /// @return The "name:stream:computed_static_context" string if computed_static_context exists, otherwise,
+    ///         the "name:stream:version:context" string.
+    std::string get_name_stream_staticcontext() const;
 
     std::vector<ModuleProfile> get_profiles_internal(const char * name) const;
 
diff --git a/libdnf/module/module_item.cpp b/libdnf/module/module_item.cpp
index efc08462..e255f526 100644
--- a/libdnf/module/module_item.cpp
+++ b/libdnf/module/module_item.cpp
@@ -111,7 +111,7 @@ std::string ModuleItem::get_name_stream_version() const {
 }
 
 
-std::string ModuleItem::get_name_stream_context() const {
+std::string ModuleItem::get_name_stream_staticcontext() const {
     // TODO(pkratoch): Find out what is the fastest way to concatenate strings.
     return libdnf::utils::sformat(
         "{}:{}:{}",
@@ -325,7 +325,7 @@ void ModuleItem::create_solvable() {
     Solvable * solvable = pool_id2solvable(pool, id.id);
 
     // Name: $name:$stream:$context
-    solvable_set_str(solvable, SOLVABLE_NAME, get_name_stream_context().c_str());
+    solvable_set_str(solvable, SOLVABLE_NAME, get_name_stream_staticcontext().c_str());
     // Version: $version
     solvable_set_str(solvable, SOLVABLE_EVR, get_version_str().c_str());
     // TODO(pkratoch): The test can be removed once modules always have arch
diff --git a/libdnf/module/module_sack.cpp b/libdnf/module/module_sack.cpp
index 989a145f..f02a54a7 100644
--- a/libdnf/module/module_sack.cpp
+++ b/libdnf/module/module_sack.cpp
@@ -381,7 +381,7 @@ void ModuleSack::Impl::set_active_modules(ModuleGoalPrivate & goal) {
         solvable_names.emplace(name);
     }
     for (const auto & module_item : modules) {
-        std::string solvable_name = module_item->get_name_stream_context();
+        std::string solvable_name = module_item->get_name_stream_staticcontext();
         if (solvable_names.contains(solvable_name)) {
             active_modules[module_item->id.id] = module_item.get();
         }
-- 
2.39.0


From 39bc9a8c6ef9afa1636826d62961774370bbed8b Mon Sep 17 00:00:00 2001
From: Pavla Kratochvilova <pkratoch@redhat.com>
Date: Tue, 3 Jan 2023 12:57:30 +0100
Subject: [PATCH 3/5] modules: Add
 ModuleItem::get_name_stream_staticcontext_arch()

---
 include/libdnf/module/module_item.hpp | 3 +++
 libdnf/module/module_item.cpp         | 8 ++++++++
 2 files changed, 11 insertions(+)

diff --git a/include/libdnf/module/module_item.hpp b/include/libdnf/module/module_item.hpp
index e0d62294..c9d66830 100644
--- a/include/libdnf/module/module_item.hpp
+++ b/include/libdnf/module/module_item.hpp
@@ -195,6 +195,9 @@ private:
     /// @return The "name:stream:computed_static_context" string if computed_static_context exists, otherwise,
     ///         the "name:stream:version:context" string.
     std::string get_name_stream_staticcontext() const;
+    /// @return The "name:stream:computed_static_context:arch" string if computed_static_context exists, otherwise,
+    ///         the "name:stream:version:context:arch" string.
+    std::string get_name_stream_staticcontext_arch() const;
 
     std::vector<ModuleProfile> get_profiles_internal(const char * name) const;
 
diff --git a/libdnf/module/module_item.cpp b/libdnf/module/module_item.cpp
index e255f526..a9077ea9 100644
--- a/libdnf/module/module_item.cpp
+++ b/libdnf/module/module_item.cpp
@@ -122,6 +122,14 @@ std::string ModuleItem::get_name_stream_staticcontext() const {
 }
 
 
+std::string ModuleItem::get_name_stream_staticcontext_arch() const {
+    return libdnf::utils::sformat(
+        "{}:{}",
+        get_name_stream_staticcontext(),
+        libdnf::utils::string::c_to_str(modulemd_module_stream_get_arch(md_stream)));
+}
+
+
 std::string ModuleItem::get_full_identifier() const {
     return libdnf::utils::sformat(
         "{}:{}:{}:{}:{}",
-- 
2.39.0


From d02efe17050634da323a4f9f6f3727759c478dae Mon Sep 17 00:00:00 2001
From: Pavla Kratochvilova <pkratoch@redhat.com>
Date: Tue, 3 Jan 2023 14:14:06 +0100
Subject: [PATCH 4/5] modules: Add ModuleQuery::filter_latest

---
 include/libdnf/module/module_query.hpp        |  9 ++
 include/libdnf/module/module_sack.hpp         |  1 +
 libdnf/module/module_query.cpp                | 59 +++++++++++++
 libdnf/module/module_sack_impl.hpp            |  1 +
 .../repodata/modules.yaml                     | 57 +++++++++++++
 .../repodata/primary.xml                      |  4 +
 .../repodata/repomd.xml                       | 18 ++++
 test/libdnf/module/test_module.cpp            | 82 +++++++++++++++++++
 test/libdnf/module/test_module.hpp            |  2 +
 9 files changed, 233 insertions(+)
 create mode 100644 test/data/repos-repomd/repomd-modules-duplicit/repodata/modules.yaml
 create mode 100644 test/data/repos-repomd/repomd-modules-duplicit/repodata/primary.xml
 create mode 100644 test/data/repos-repomd/repomd-modules-duplicit/repodata/repomd.xml

diff --git a/include/libdnf/module/module_query.hpp b/include/libdnf/module/module_query.hpp
index 6f465c41..619c703b 100644
--- a/include/libdnf/module/module_query.hpp
+++ b/include/libdnf/module/module_query.hpp
@@ -133,6 +133,13 @@ public:
     void filter_arch(
         const std::vector<std::string> & patterns, libdnf::sack::QueryCmp cmp_type = libdnf::sack::QueryCmp::EQ);
 
+    /// Group ModuleItems by `name`, `stream`, `context` and `arch`. Then within each group, keep packages that correspond with up to `limit` of (all but) latest `version`s in the group.
+    ///
+    /// @param limit            If `limit` > 0, keep `limit` number `version`s in each group.
+    ///                         If `limit` < 0, keep all **but** `limit` last `version`s in each group.
+    /// @since 5.0.4
+    void filter_latest(int limit = 1);
+
 private:
     // Getter callbacks that return attribute values from an object. Used in query filters.
     struct Get {
@@ -145,6 +152,8 @@ private:
 
     friend ModuleItem;
 
+    static bool latest_cmp(const ModuleItem * module_item_1, const ModuleItem * module_item_2);
+
     BaseWeakPtr base;
 };
 
diff --git a/include/libdnf/module/module_sack.hpp b/include/libdnf/module/module_sack.hpp
index 6917627b..a2d4ef80 100644
--- a/include/libdnf/module/module_sack.hpp
+++ b/include/libdnf/module/module_sack.hpp
@@ -99,6 +99,7 @@ private:
     friend class libdnf::repo::RepoSack;
     friend ModuleItem;
     friend class ModuleGoalPrivate;
+    friend class ModuleQuery;
 
     ModuleSack(const BaseWeakPtr & base);
 
diff --git a/libdnf/module/module_query.cpp b/libdnf/module/module_query.cpp
index 023d03c9..e93bd7ce 100644
--- a/libdnf/module/module_query.cpp
+++ b/libdnf/module/module_query.cpp
@@ -100,4 +100,63 @@ void ModuleQuery::filter_arch(const std::vector<std::string> & patterns, libdnf:
 }
 
 
+bool ModuleQuery::latest_cmp(const ModuleItem * module_item_1, const ModuleItem * module_item_2) {
+    Pool * pool = module_item_1->module_sack->p_impl->pool;
+    const Solvable * s1 = pool_id2solvable(pool, module_item_1->id.id);
+    const Solvable * s2 = pool_id2solvable(pool, module_item_2->id.id);
+    if (s1->name != s2->name) {
+        return s1->name < s2->name;
+    }
+    if (s1->arch != s2->arch) {
+        return s1->arch < s2->arch;
+    }
+    return module_item_1->get_version() > module_item_2->get_version();
+}
+
+
+void ModuleQuery::filter_latest(int limit) {
+    if (limit == 0) {
+        clear();
+        return;
+    }
+
+    std::vector<const ModuleItem *> same_nsca_vector;
+    same_nsca_vector.reserve(size());
+
+    for (auto & module_item : get_data()) {
+        same_nsca_vector.push_back(&module_item);
+    }
+    if (limit > 0) {
+        sort(same_nsca_vector.begin(), same_nsca_vector.end(), latest_cmp);
+    } else {
+        sort(same_nsca_vector.rbegin(), same_nsca_vector.rend(), latest_cmp);
+        limit *= -1;
+    }
+
+    std::string last_nsca = same_nsca_vector.front()->get_name_stream_staticcontext_arch();
+    long long last_version = -1;  // invalid version value that cannot be in a module item
+    int kept_in_query = 0;
+    for (auto module_item : same_nsca_vector) {
+        // If the nsca is different from the last, it means a new block, so start a new `kept_in_query` count and set version to invalid value again.
+        std::string nsca = module_item->get_name_stream_staticcontext_arch();
+        if (last_nsca != nsca) {
+            last_nsca = nsca;
+            kept_in_query = 0;
+            last_version = -1;
+        }
+
+        long long version = module_item->get_version();
+        if (last_version == version) {
+            // Do nothing => keep it in query, do not increase `kept_in_query` count.
+            // It cannot happen that we would go over the limit, because the `last_version` can be only -1 or a version of an item that was kept in the query.
+        } else if (kept_in_query < limit) {
+            last_version = version;
+            kept_in_query += 1;
+        } else {
+            get_data().erase(*module_item);
+        }
+    }
+}
+
+
 }  // namespace libdnf::module
diff --git a/libdnf/module/module_sack_impl.hpp b/libdnf/module/module_sack_impl.hpp
index aa807bcc..1913b923 100644
--- a/libdnf/module/module_sack_impl.hpp
+++ b/libdnf/module/module_sack_impl.hpp
@@ -84,6 +84,7 @@ private:
     friend ModuleSack;
     friend ModuleItem;
     friend ModuleGoalPrivate;
+    friend class ModuleQuery;
 
     BaseWeakPtr base;
     ModuleMetadata module_metadata;
diff --git a/test/data/repos-repomd/repomd-modules-duplicit/repodata/modules.yaml b/test/data/repos-repomd/repomd-modules-duplicit/repodata/modules.yaml
new file mode 100644
index 00000000..24b361e7
--- /dev/null
+++ b/test/data/repos-repomd/repomd-modules-duplicit/repodata/modules.yaml
@@ -0,0 +1,57 @@
+---
+  document: modulemd
+  version: 2
+  data:
+    name: gooseberry
+    stream: 5.5
+    version: 1
+    context: 72aaf46b6
+    static_context: true
+    arch: x86_64
+    summary: Test module
+    description: Test module
+    license:
+      module: [MIT]
+    profiles:
+      minimal:
+        rpms: []
+...
+---
+  document: modulemd
+  version: 2
+  data:
+    name: gooseberry
+    stream: 5.5
+    version: 3
+    context: 72aaf46b6
+    static_context: true
+    arch: x86_64
+    summary: Test module
+    description: Test module
+    license:
+      module: [MIT]
+    profiles:
+      minimal:
+        rpms: []
+...
+---
+  document: modulemd
+  version: 2
+  data:
+    name: berries
+    stream: main
+    version: 3
+    context: 72aaf46b6
+    static_context: true
+    arch: x86_64
+    summary: Test module
+    description: Test module
+    license:
+      module: [MIT]
+    profiles:
+      minimal:
+        rpms: []
+    dependencies:
+    - requires:
+        gooseberry: [5.5]
+...
diff --git a/test/data/repos-repomd/repomd-modules-duplicit/repodata/primary.xml b/test/data/repos-repomd/repomd-modules-duplicit/repodata/primary.xml
new file mode 100644
index 00000000..45d43635
--- /dev/null
+++ b/test/data/repos-repomd/repomd-modules-duplicit/repodata/primary.xml
@@ -0,0 +1,4 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<metadata xmlns="http://linux.duke.edu/metadata/common" xmlns:rpm="http://linux.duke.edu/metadata/rpm" packages="1">
+
+</metadata>
diff --git a/test/data/repos-repomd/repomd-modules-duplicit/repodata/repomd.xml b/test/data/repos-repomd/repomd-modules-duplicit/repodata/repomd.xml
new file mode 100644
index 00000000..8b83f62a
--- /dev/null
+++ b/test/data/repos-repomd/repomd-modules-duplicit/repodata/repomd.xml
@@ -0,0 +1,18 @@
+<repomd xmlns="http://linux.duke.edu/metadata/repo">
+  <revision>1550000000</revision>
+  <data type="primary">
+    <checksum type="sha256">be3ca87f91b8c4bf54e5cb04bb36358744d8dbf9efd8910256bc27abb79a1cc6</checksum>
+    <open-checksum type="sha256">be3ca87f91b8c4bf54e5cb04bb36358744d8dbf9efd8910256bc27abb79a1cc6</open-checksum>
+    <location href="repodata/primary.xml" />
+    <timestamp>1597222003</timestamp>
+    <size>81503</size>
+    <open-size>864433</open-size>
+  </data>
+  <data type="modules">
+    <checksum type="sha256">18a868b0227d78b40ae22641390c496c943faafb3d67ea74603e2ab7819615da</checksum>
+    <open-checksum type="sha256">18a868b0227d78b40ae22641390c496c943faafb3d67ea74603e2ab7819615da</open-checksum>
+    <location href="repodata/modules.yaml" />
+    <timestamp>1641802880</timestamp>
+    <size>492</size>
+  </data>
+</repomd>
\ No newline at end of file
diff --git a/test/libdnf/module/test_module.cpp b/test/libdnf/module/test_module.cpp
index af985f4b..f7131630 100644
--- a/test/libdnf/module/test_module.cpp
+++ b/test/libdnf/module/test_module.cpp
@@ -163,3 +163,85 @@ void ModuleTest::test_query() {
         CPPUNIT_ASSERT_EQUAL(std::string("x86_64"), result.get_arch());
     }
 }
+
+void ModuleTest::test_query_latest() {
+    add_repo_repomd("repomd-modules");
+    add_repo_repomd("repomd-modules-duplicit");
+
+    {  // Check we can see all the modules, even ones with duplicit nscva
+        ModuleQuery query(base, false);
+        CPPUNIT_ASSERT_EQUAL((size_t)13, query.size());
+    }
+
+    {
+        ModuleQuery query(base, false);
+        query.filter_latest(0);
+        CPPUNIT_ASSERT_EQUAL((size_t)0, query.size());
+    }
+
+    {
+        ModuleQuery query(base, false);
+        query.filter_latest();
+        CPPUNIT_ASSERT_EQUAL((size_t)11, query.size());
+    }
+
+    {
+        ModuleQuery query(base, false);
+        query.filter_latest(-1);
+        CPPUNIT_ASSERT_EQUAL((size_t)10, query.size());
+    }
+
+    {
+        ModuleQuery query(base, false);
+        query.filter_name("gooseberry");
+        query.filter_latest();
+        CPPUNIT_ASSERT_EQUAL((size_t)4, query.size());
+    }
+
+    {
+        ModuleQuery query(base, false);
+        query.filter_name("gooseberry");
+        query.filter_latest(2);
+        CPPUNIT_ASSERT_EQUAL((size_t)5, query.size());
+    }
+
+    {
+        ModuleQuery query(base, false);
+        query.filter_name("gooseberry");
+        query.filter_latest(-1);
+        CPPUNIT_ASSERT_EQUAL((size_t)3, query.size());
+    }
+
+    {
+        ModuleQuery query(base, false);
+        query.filter_name("gooseberry");
+        query.filter_latest(-2);
+        CPPUNIT_ASSERT_EQUAL((size_t)4, query.size());
+    }
+
+    {
+        ModuleQuery query(base, false);
+        query.filter_name("gooseberry");
+        query.filter_context("72aaf46b6");
+        query.filter_latest();
+        for (auto module_item : query) {
+            CPPUNIT_ASSERT_EQUAL(std::string("gooseberry"), module_item.get_name());
+            CPPUNIT_ASSERT_EQUAL(std::string("5.5"), module_item.get_stream());
+            CPPUNIT_ASSERT_EQUAL(std::string("3"), module_item.get_version_str());
+            CPPUNIT_ASSERT_EQUAL(std::string("x86_64"), module_item.get_arch());
+        }
+    }
+
+    {
+        ModuleQuery query(base, false);
+        query.filter_name("gooseberry");
+        query.filter_context("72aaf46b6");
+        query.filter_latest(-1);
+        for (auto module_item : query) {
+            CPPUNIT_ASSERT_EQUAL(std::string("gooseberry"), module_item.get_name());
+            CPPUNIT_ASSERT_EQUAL(std::string("5.5"), module_item.get_stream());
+            CPPUNIT_ASSERT_EQUAL(std::string("1"), module_item.get_version_str());
+            CPPUNIT_ASSERT_EQUAL(std::string("x86_64"), module_item.get_arch());
+        }
+    }
+}
diff --git a/test/libdnf/module/test_module.hpp b/test/libdnf/module/test_module.hpp
index 896a32b4..e0597017 100644
--- a/test/libdnf/module/test_module.hpp
+++ b/test/libdnf/module/test_module.hpp
@@ -33,6 +33,7 @@ class ModuleTest : public BaseTestCase {
     CPPUNIT_TEST(test_resolve);
     CPPUNIT_TEST(test_resolve_broken_defaults);
     CPPUNIT_TEST(test_query);
+    CPPUNIT_TEST(test_query_latest);
     CPPUNIT_TEST_SUITE_END();
 
 public:
@@ -40,6 +41,7 @@ public:
     void test_resolve();
     void test_resolve_broken_defaults();
     void test_query();
+    void test_query_latest();
 };
 
 #endif
-- 
2.39.0


From 1329442c4c2c58d046823e7a83ce7cf45fd25e92 Mon Sep 17 00:00:00 2001
From: Pavla Kratochvilova <pkratoch@redhat.com>
Date: Fri, 6 Jan 2023 09:40:31 +0100
Subject: [PATCH 5/5] Replace libdnf::utils::sformat with fmt::format when
 possible

The libdnf::utils::sformat exists only for cases when the format string
is not a constant expression, so it is not needed in these cases.
---
 libdnf-cli/output/transactioninfo.cpp        |  5 ++--
 libdnf-cli/output/transactionlist.cpp        |  2 +-
 libdnf/conf/config_parser.cpp                |  2 +-
 libdnf/logger/logger.cpp                     |  4 +--
 libdnf/module/module_dependency.cpp          |  3 +--
 libdnf/module/module_item.cpp                | 28 +++++++++++---------
 libdnf/module/module_sack.cpp                |  3 +--
 libdnf/repo/repo_downloader.cpp              |  2 +-
 libdnf/repo/solv_repo.cpp                    |  2 +-
 libdnf/system/state.cpp                      |  2 +-
 test/libdnf/base_test_case.cpp               | 20 +++++++-------
 test/libdnf/comps/test_group.cpp             |  3 +--
 test/libdnf/transaction/test_transaction.cpp |  4 +--
 test/libdnf/utils.hpp                        | 21 +++++++--------
 14 files changed, 49 insertions(+), 52 deletions(-)

diff --git a/libdnf-cli/output/transactioninfo.cpp b/libdnf-cli/output/transactioninfo.cpp
index 29b36c58..bfaaf90a 100644
--- a/libdnf-cli/output/transactioninfo.cpp
+++ b/libdnf-cli/output/transactioninfo.cpp
@@ -33,10 +33,9 @@ void print_transaction_info(libdnf::transaction::Transaction & transaction) {
 
     KeyValueTable info;
     info.add_line("Transaction ID", transaction.get_id(), "bold");
-    info.add_line(
-        "Begin time", libdnf::utils::sformat("{:%F %X}", std::chrono::system_clock::from_time_t(dt_start_time)));
+    info.add_line("Begin time", fmt::format("{:%F %X}", std::chrono::system_clock::from_time_t(dt_start_time)));
     info.add_line("Begin rpmdb", transaction.get_rpmdb_version_begin());
-    info.add_line("End time", libdnf::utils::sformat("{:%F %X}", std::chrono::system_clock::from_time_t(dt_end_time)));
+    info.add_line("End time", fmt::format("{:%F %X}", std::chrono::system_clock::from_time_t(dt_end_time)));
     info.add_line("End rpmdb", transaction.get_rpmdb_version_end());
 
     info.add_line("User", transaction.get_user_id());
diff --git a/libdnf-cli/output/transactionlist.cpp b/libdnf-cli/output/transactionlist.cpp
index b652cd23..48b4edf7 100644
--- a/libdnf-cli/output/transactionlist.cpp
+++ b/libdnf-cli/output/transactionlist.cpp
@@ -48,7 +48,7 @@ void print_transaction_list(std::vector<libdnf::transaction::Transaction> & ts_l
         scols_line_set_data(ln, 0, std::to_string(ts.get_id()).c_str());
         scols_line_set_data(ln, 1, ts.get_description().c_str());
         scols_line_set_data(
-            ln, 2, libdnf::utils::sformat("{:%F %X}", std::chrono::system_clock::from_time_t(dt_start_time)).c_str());
+            ln, 2, fmt::format("{:%F %X}", std::chrono::system_clock::from_time_t(dt_start_time)).c_str());
         // TODO(lukash) fill the Actions(s), if we even want them?
         scols_line_set_data(ln, 3, "");
         scols_line_set_data(ln, 4, std::to_string(ts.get_packages().size()).c_str());
diff --git a/libdnf/conf/config_parser.cpp b/libdnf/conf/config_parser.cpp
index c6eec65c..fd59df60 100644
--- a/libdnf/conf/config_parser.cpp
+++ b/libdnf/conf/config_parser.cpp
@@ -129,7 +129,7 @@ static void write_section(
     if (raw_item != raw_items.end()) {
         file.write(raw_item->second);
     } else {
-        file.write(utils::sformat("[{}]\n", raw_item->second));
+        file.write(fmt::format("[{}]\n", raw_item->second));
     }
     write_key_vals(file, section, key_val_map, raw_items);
 }
diff --git a/libdnf/logger/logger.cpp b/libdnf/logger/logger.cpp
index eff7f3f7..54b5f8ce 100644
--- a/libdnf/logger/logger.cpp
+++ b/libdnf/logger/logger.cpp
@@ -19,8 +19,6 @@ along with libdnf.  If not, see <https://www.gnu.org/licenses/>.
 
 #include "libdnf/logger/logger.hpp"
 
-#include "libdnf/utils/format.hpp"
-
 #include <fmt/chrono.h>
 
 
@@ -37,7 +35,7 @@ void StringLogger::write(
     Level level,
     const std::string & message) noexcept {
     try {
-        write(utils::sformat("{:%FT%T%z} [{}] {} {}\n", time, pid, level_to_cstr(level), message).c_str());
+        write(fmt::format("{:%FT%T%z} [{}] {} {}\n", time, pid, level_to_cstr(level), message).c_str());
     } catch (const std::exception & e) {
         write("Failed to format: ");
         write(message.c_str());
diff --git a/libdnf/module/module_dependency.cpp b/libdnf/module/module_dependency.cpp
index ab9d5ecc..ca37ef86 100644
--- a/libdnf/module/module_dependency.cpp
+++ b/libdnf/module/module_dependency.cpp
@@ -24,7 +24,6 @@ along with libdnf.  If not, see <https://www.gnu.org/licenses/>.
 #include "libdnf/module/module_item.hpp"
 #include "libdnf/module/module_sack.hpp"
 #include "libdnf/module/module_sack_weak.hpp"
-#include "libdnf/utils/format.hpp"
 
 #include <modulemd-2.0/modulemd-module-stream.h>
 #include <modulemd-2.0/modulemd-profile.h>
@@ -48,7 +47,7 @@ std::string ModuleDependency::to_string() {
         return module_name;
     }
     std::sort(streams.begin(), streams.end());
-    return libdnf::utils::sformat("{}:[{}]", module_name, utils::string::join(streams, ","));
+    return fmt::format("{}:[{}]", module_name, utils::string::join(streams, ","));
 }
 
 
diff --git a/libdnf/module/module_item.cpp b/libdnf/module/module_item.cpp
index a9077ea9..6f9daf18 100644
--- a/libdnf/module/module_item.cpp
+++ b/libdnf/module/module_item.cpp
@@ -25,7 +25,6 @@ along with libdnf.  If not, see <https://www.gnu.org/licenses/>.
 #include "libdnf/module/module_dependency.hpp"
 #include "libdnf/module/module_sack.hpp"
 #include "libdnf/module/module_sack_weak.hpp"
-#include "libdnf/utils/format.hpp"
 
 #include <modulemd-2.0/modulemd-module-stream.h>
 #include <modulemd-2.0/modulemd-profile.h>
@@ -95,7 +94,7 @@ std::string ModuleItem::get_arch() const {
 
 
 std::string ModuleItem::get_name_stream(ModulemdModuleStream * md_stream) {
-    return libdnf::utils::sformat(
+    return fmt::format(
         "{}:{}",
         libdnf::utils::string::c_to_str(modulemd_module_stream_get_module_name(md_stream)),
         libdnf::utils::string::c_to_str(modulemd_module_stream_get_stream_name(md_stream)));
@@ -103,7 +102,7 @@ std::string ModuleItem::get_name_stream(ModulemdModuleStream * md_stream) {
 
 
 std::string ModuleItem::get_name_stream_version() const {
-    return libdnf::utils::sformat(
+    return fmt::format(
         "{}:{}:{}",
         libdnf::utils::string::c_to_str(modulemd_module_stream_get_module_name(md_stream)),
         libdnf::utils::string::c_to_str(modulemd_module_stream_get_stream_name(md_stream)),
@@ -113,7 +112,12 @@ std::string ModuleItem::get_name_stream_version() const {
 
 std::string ModuleItem::get_name_stream_staticcontext() const {
     // TODO(pkratoch): Find out what is the fastest way to concatenate strings.
-    return libdnf::utils::sformat(
+    // TODO(pkratoch): fmt::format accepts char * but it is unable to handle nullptr. We can avoid allocating memory
+    //                 for temporary std::string by replacing libdnf::utils::string::c_to_str with something like this:
+    //                 inline constexpr const char * null_to_empty(const char * str) noexcept {
+    //                     return str ? str : "";
+    //                 }
+    return fmt::format(
         "{}:{}:{}",
         libdnf::utils::string::c_to_str(modulemd_module_stream_get_module_name(md_stream)),
         libdnf::utils::string::c_to_str(modulemd_module_stream_get_stream_name(md_stream)),
@@ -123,7 +127,7 @@ std::string ModuleItem::get_name_stream_staticcontext() const {
 
 
 std::string ModuleItem::get_name_stream_staticcontext_arch() const {
-    return libdnf::utils::sformat(
+    return fmt::format(
         "{}:{}",
         get_name_stream_staticcontext(),
         libdnf::utils::string::c_to_str(modulemd_module_stream_get_arch(md_stream)));
@@ -131,7 +135,7 @@ std::string ModuleItem::get_name_stream_staticcontext_arch() const {
 
 
 std::string ModuleItem::get_full_identifier() const {
-    return libdnf::utils::sformat(
+    return fmt::format(
         "{}:{}:{}:{}:{}",
         libdnf::utils::string::c_to_str(modulemd_module_stream_get_module_name(md_stream)),
         libdnf::utils::string::c_to_str(modulemd_module_stream_get_stream_name(md_stream)),
@@ -344,13 +348,13 @@ void ModuleItem::create_solvable() {
     solvable_set_str(solvable, SOLVABLE_DESCRIPTION, get_name_stream().c_str());
 
     // Create Provides: module($name)
-    std::string provide = libdnf::utils::sformat("module({})", get_name());
+    std::string provide = fmt::format("module({})", get_name());
     auto dep_id = pool_str2id(pool, provide.c_str(), 1);
     solvable_add_deparray(solvable, SOLVABLE_PROVIDES, dep_id, -1);
     // Create Conflicts: module($name)
     solvable_add_deparray(solvable, SOLVABLE_CONFLICTS, dep_id, 0);
     // Create Provides: module($name:$stream)
-    provide = libdnf::utils::sformat("module({})", get_name_stream());
+    provide = fmt::format("module({})", get_name_stream());
     dep_id = pool_str2id(pool, provide.c_str(), 1);
     solvable_add_deparray(solvable, SOLVABLE_PROVIDES, dep_id, -1);
 
@@ -370,10 +374,10 @@ void ModuleItem::create_dependencies() const {
         for (const auto & stream : dependency.get_streams()) {
             // If the stream require starts with "-", create conflict with the stream, otherwise, remember the stream require
             if (stream.find('-', 0) != std::string::npos) {
-                req_formatted = libdnf::utils::sformat("module({}:{}", module_name, stream.substr(1));
+                req_formatted = fmt::format("module({}:{}", module_name, stream.substr(1));
                 solvable_add_deparray(solvable, SOLVABLE_CONFLICTS, pool_str2id(pool, req_formatted.c_str(), 1), 0);
             } else {
-                req_formatted = libdnf::utils::sformat("module({}:{})", module_name, stream);
+                req_formatted = fmt::format("module({}:{})", module_name, stream);
                 required_streams.push_back(req_formatted);
             }
         }
@@ -381,12 +385,12 @@ void ModuleItem::create_dependencies() const {
         // If there is exactly one required stream, require the stream
         // If there are more required streams, add a rich dependency to require any of the streams
         if (required_streams.empty()) {
-            req_formatted = libdnf::utils::sformat("module({})", module_name);
+            req_formatted = fmt::format("module({})", module_name);
             solvable_add_deparray(solvable, SOLVABLE_REQUIRES, pool_str2id(pool, req_formatted.c_str(), 1), -1);
         } else if (required_streams.size() == 1) {
             solvable_add_deparray(solvable, SOLVABLE_REQUIRES, pool_str2id(pool, required_streams[0].c_str(), 1), -1);
         } else {
-            req_formatted = libdnf::utils::sformat("({})", utils::string::join(required_streams, " or "));
+            req_formatted = fmt::format("({})", utils::string::join(required_streams, " or "));
             Id dep_id = pool_parserpmrichdep(pool, req_formatted.c_str());
             if (!dep_id) {
                 throw std::runtime_error("Cannot parse module requires");
diff --git a/libdnf/module/module_sack.cpp b/libdnf/module/module_sack.cpp
index f02a54a7..8d74ef1c 100644
--- a/libdnf/module/module_sack.cpp
+++ b/libdnf/module/module_sack.cpp
@@ -413,8 +413,7 @@ std::pair<std::vector<std::vector<std::string>>, ModuleSack::ModuleErrorType> Mo
 
     for (const auto & module_item : module_items) {
         // Create "module(name:stream)" provide reldep
-        const Id reldep_id =
-            pool_str2id(pool, libdnf::utils::sformat("module({})", module_item->get_name_stream()).c_str(), 1);
+        const Id reldep_id = pool_str2id(pool, fmt::format("module({})", module_item->get_name_stream()).c_str(), 1);
 
         try {
             state = base->p_impl->get_system_state().get_module_state(module_item->get_name());
diff --git a/libdnf/repo/repo_downloader.cpp b/libdnf/repo/repo_downloader.cpp
index ad3a9952..5546946e 100644
--- a/libdnf/repo/repo_downloader.cpp
+++ b/libdnf/repo/repo_downloader.cpp
@@ -739,7 +739,7 @@ void RepoDownloader::add_countme_flag(LibrepoHandle & handle) {
     }
 
     // Save the cookie
-    utils::fs::File(file_path, "w").write(utils::sformat("{} {} {} {}", COUNTME_VERSION, epoch, win, budget));
+    utils::fs::File(file_path, "w").write(fmt::format("{} {} {} {}", COUNTME_VERSION, epoch, win, budget));
 }
 
 
diff --git a/libdnf/repo/solv_repo.cpp b/libdnf/repo/solv_repo.cpp
index 1b4c34c1..c982d4a1 100644
--- a/libdnf/repo/solv_repo.cpp
+++ b/libdnf/repo/solv_repo.cpp
@@ -682,7 +682,7 @@ void SolvRepo::write_ext(Id repodata_id, RepodataType type) {
 
 std::string SolvRepo::solv_file_name(const char * type) {
     if (type != nullptr) {
-        return utils::sformat("{}-{}.solvx", config.get_id(), type);
+        return fmt::format("{}-{}.solvx", config.get_id(), type);
     } else {
         return config.get_id() + ".solv";
     }
diff --git a/libdnf/system/state.cpp b/libdnf/system/state.cpp
index e4b95304..924c86d3 100644
--- a/libdnf/system/state.cpp
+++ b/libdnf/system/state.cpp
@@ -193,7 +193,7 @@ const constexpr uint8_t version_minor{0};
 
 
 static std::string make_version() {
-    return libdnf::utils::sformat("{}.{}", version_major, version_minor);
+    return fmt::format("{}.{}", version_major, version_minor);
 }
 
 
diff --git a/test/libdnf/base_test_case.cpp b/test/libdnf/base_test_case.cpp
index c23c7227..c6e71fe6 100644
--- a/test/libdnf/base_test_case.cpp
+++ b/test/libdnf/base_test_case.cpp
@@ -37,7 +37,7 @@ along with libdnf.  If not, see <https://www.gnu.org/licenses/>.
 #include <map>
 
 
-using libdnf::utils::sformat;
+using fmt::format;
 
 
 libdnf::repo::RepoWeakPtr BaseTestCase::add_repo(const std::string & repoid, const std::string & repo_path, bool load) {
@@ -87,9 +87,9 @@ libdnf::advisory::Advisory BaseTestCase::get_advisory(const std::string & name)
     }
 
     if (found.empty()) {
-        CPPUNIT_FAIL(sformat("No advisory \"{}\" found. All pool advisories:{}", name, to_string(advisories)));
+        CPPUNIT_FAIL(format("No advisory \"{}\" found. All pool advisories:{}", name, to_string(advisories)));
     } else if (found.size() > 1) {
-        CPPUNIT_FAIL(sformat("More than one advisory matching \"{}\" found:{}", name, to_string(advisories)));
+        CPPUNIT_FAIL(format("More than one advisory matching \"{}\" found:{}", name, to_string(advisories)));
     }
 
     return *found.begin();
@@ -109,10 +109,10 @@ libdnf::comps::Environment BaseTestCase::get_environment(const std::string & env
 
     if (found.empty()) {
         CPPUNIT_FAIL(
-            sformat("No environment \"{}\" found. All pool environments:{}", environmentid, to_string(environments)));
+            format("No environment \"{}\" found. All pool environments:{}", environmentid, to_string(environments)));
     } else if (found.size() > 1) {
         CPPUNIT_FAIL(
-            sformat("More than one environment matching \"{}\" found:{}", environmentid, to_string(environments)));
+            format("More than one environment matching \"{}\" found:{}", environmentid, to_string(environments)));
     }
 
     return *found.begin();
@@ -131,9 +131,9 @@ libdnf::comps::Group BaseTestCase::get_group(const std::string & groupid, bool i
     }
 
     if (found.empty()) {
-        CPPUNIT_FAIL(sformat("No group \"{}\" found. All pool groups:{}", groupid, to_string(groups)));
+        CPPUNIT_FAIL(format("No group \"{}\" found. All pool groups:{}", groupid, to_string(groups)));
     } else if (found.size() > 1) {
-        CPPUNIT_FAIL(sformat("More than one group matching \"{}\" found:{}", groupid, to_string(groups)));
+        CPPUNIT_FAIL(format("More than one group matching \"{}\" found:{}", groupid, to_string(groups)));
     }
 
     return *found.begin();
@@ -166,7 +166,7 @@ libdnf::rpm::Package BaseTestCase::get_pkg_i(const std::string & nevra, size_t i
 
     if (query.size() <= index) {
         CPPUNIT_FAIL(
-            sformat("Package index {} out of bounds for \"{}\", query packages:{}", index, nevra, to_string(query)));
+            format("Package index {} out of bounds for \"{}\", query packages:{}", index, nevra, to_string(query)));
     }
 
     auto it = query.begin();
@@ -208,9 +208,9 @@ libdnf::rpm::Package BaseTestCase::add_cmdline_pkg(const std::string & relative_
 libdnf::rpm::Package BaseTestCase::first_query_pkg(libdnf::rpm::PackageQuery & query, const std::string & what) {
     if (query.empty()) {
         CPPUNIT_FAIL(
-            sformat("No package \"{}\" found. All sack packages:{}", what, to_string(libdnf::rpm::PackageQuery(base))));
+            format("No package \"{}\" found. All sack packages:{}", what, to_string(libdnf::rpm::PackageQuery(base))));
     } else if (query.size() > 1) {
-        CPPUNIT_FAIL(sformat("More than one package matching \"{}\" found:{}", what, to_string(query)));
+        CPPUNIT_FAIL(format("More than one package matching \"{}\" found:{}", what, to_string(query)));
     }
 
     return *query.begin();
diff --git a/test/libdnf/comps/test_group.cpp b/test/libdnf/comps/test_group.cpp
index cd5bc95e..17600efb 100644
--- a/test/libdnf/comps/test_group.cpp
+++ b/test/libdnf/comps/test_group.cpp
@@ -26,7 +26,6 @@ along with libdnf.  If not, see <https://www.gnu.org/licenses/>.
 #include "libdnf/comps/comps.hpp"
 #include "libdnf/comps/group/package.hpp"
 #include "libdnf/comps/group/query.hpp"
-#include "libdnf/utils/format.hpp"
 
 #include <filesystem>
 
@@ -43,7 +42,7 @@ struct assertion_traits<libdnf::comps::Package> {
     }
 
     inline static std::string toString(const libdnf::comps::Package & package) {
-        return libdnf::utils::sformat(
+        return fmt::format(
             "{} (type: {}, condition: {})",
             package.get_name(),
             static_cast<int>(package.get_type()),
diff --git a/test/libdnf/transaction/test_transaction.cpp b/test/libdnf/transaction/test_transaction.cpp
index ee4c05a5..644b7d5c 100644
--- a/test/libdnf/transaction/test_transaction.cpp
+++ b/test/libdnf/transaction/test_transaction.cpp
@@ -55,8 +55,8 @@ static Transaction create_transaction(libdnf::Base & base, int nr) {
     auto trans = (*(base.get_transaction_history()).*get(new_transaction{}))();
     (trans.*get(set_dt_start{}))(nr * 10 + 1);
     (trans.*get(set_dt_end{}))(nr * 10 + 2);
-    (trans.*get(set_rpmdb_version_begin{}))(libdnf::utils::sformat("ts {} begin", nr));
-    (trans.*get(set_rpmdb_version_end{}))(libdnf::utils::sformat("ts {} end", nr));
+    (trans.*get(set_rpmdb_version_begin{}))(fmt::format("ts {} begin", nr));
+    (trans.*get(set_rpmdb_version_end{}))(fmt::format("ts {} end", nr));
     (trans.*get(set_releasever{}))("26");
     (trans.*get(set_user_id{}))(1000);
     (trans.*get(set_description{}))("dnf install foo");
diff --git a/test/libdnf/utils.hpp b/test/libdnf/utils.hpp
index 669bc5c8..3c1f6161 100644
--- a/test/libdnf/utils.hpp
+++ b/test/libdnf/utils.hpp
@@ -32,7 +32,6 @@ along with libdnf.  If not, see <https://www.gnu.org/licenses/>.
 #include "libdnf/comps/group/query.hpp"
 #include "libdnf/rpm/package_query.hpp"
 #include "libdnf/rpm/package_set.hpp"
-#include "libdnf/utils/format.hpp"
 
 #include <cppunit/extensions/HelperMacros.h>
 
@@ -83,7 +82,7 @@ struct assertion_traits<libdnf::advisory::Advisory> {
     }
 
     inline static std::string toString(const libdnf::advisory::Advisory & advisory) {
-        return libdnf::utils::sformat("{} (id: {})", advisory.get_name(), advisory.get_id().id);
+        return fmt::format("{} (id: {})", advisory.get_name(), advisory.get_id().id);
     }
 };
 
@@ -115,7 +114,7 @@ struct assertion_traits<libdnf::comps::Environment> {
             repos += repo;
         }
 
-        return libdnf::utils::sformat("{} (repos: {})", environment.get_environmentid(), repos);
+        return fmt::format("{} (repos: {})", environment.get_environmentid(), repos);
     }
 };
 
@@ -147,7 +146,7 @@ struct assertion_traits<libdnf::comps::Group> {
             repos += repo;
         }
 
-        return libdnf::utils::sformat("{} (repos: {})", group.get_groupid(), repos);
+        return fmt::format("{} (repos: {})", group.get_groupid(), repos);
     }
 };
 
@@ -171,7 +170,7 @@ struct assertion_traits<libdnf::rpm::Package> {
     }
 
     inline static std::string toString(const libdnf::rpm::Package & pkg) {
-        return libdnf::utils::sformat(
+        return fmt::format(
             "{} (id: {} repo: {} {})",
             pkg.get_full_nevra(),
             pkg.get_id().id,
@@ -200,7 +199,7 @@ struct assertion_traits<libdnf::rpm::Reldep> {
     }
 
     inline static std::string toString(const libdnf::rpm::Reldep & reldep) {
-        return libdnf::utils::sformat("{} (id: {})", reldep.to_string(), reldep.get_id().id);
+        return fmt::format("{} (id: {})", reldep.to_string(), reldep.get_id().id);
     }
 };
 
@@ -213,7 +212,7 @@ struct assertion_traits<libdnf::base::TransactionPackage> {
     }
 
     inline static std::string toString(const libdnf::base::TransactionPackage & tspkg) {
-        return libdnf::utils::sformat(
+        return fmt::format(
             "TransactionPackage: package: {}, action: {}, reason: {}, state {}",
             to_string(tspkg.get_package()),
             transaction_item_action_to_string(tspkg.get_action()),
@@ -229,7 +228,7 @@ struct assertion_traits<libdnf::system::PackageState> {
     }
 
     inline static std::string toString(const libdnf::system::PackageState & pkg_state) {
-        return libdnf::utils::sformat("PackageState: reason: {}", pkg_state.reason);
+        return fmt::format("PackageState: reason: {}", pkg_state.reason);
     }
 };
 
@@ -240,7 +239,7 @@ struct assertion_traits<libdnf::system::NevraState> {
     }
 
     inline static std::string toString(const libdnf::system::NevraState & nevra_state) {
-        return libdnf::utils::sformat("NevraState: from_repo: {}", nevra_state.from_repo);
+        return fmt::format("NevraState: from_repo: {}", nevra_state.from_repo);
     }
 };
 
@@ -251,7 +250,7 @@ struct assertion_traits<libdnf::system::GroupState> {
     }
 
     inline static std::string toString(const libdnf::system::GroupState & group_state) {
-        return libdnf::utils::sformat(
+        return fmt::format(
             "GroupState: userinstalled: {}, packages: {}",
             group_state.userinstalled,
             assertion_traits<std::vector<std::string>>::toString(group_state.packages));
@@ -266,7 +265,7 @@ struct assertion_traits<libdnf::system::ModuleState> {
     }
 
     inline static std::string toString(const libdnf::system::ModuleState & module_state) {
-        return libdnf::utils::sformat(
+        return fmt::format(
             "ModuleState: enabled_stream: {}, state: {}, installed_profiles: {}",
             module_state.enabled_stream,
             libdnf::module::module_state_to_string(module_state.state),
-- 
2.39.0

